import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Progress } from '@/components/ui/progress';
{{#if (includes features 'ai')}}
import { Brain, MessageCircle } from 'lucide-react';
{{/if}}
{{#if (includes features 'export')}}
import { Download, FileText, Table } from 'lucide-react';
{{/if}}
{{#if (includes features 'collaboration')}}
import { Users, Share2 } from 'lucide-react';
{{/if}}
{{#if aslSupport}}
import { ASLVideoPlayer } from '@/components/asl/ASLVideoPlayer';
{{/if}}

interface {{pascalCase name}}Props {
  className?: string;
  initialData?: any;
  onSave?: (data: any) => void;
  onExport?: (format: string) => void;
}

export function {{pascalCase name}}({
  className = "",
  initialData = {},
  onSave,
  onExport
}: {{pascalCase name}}Props) {
  const [data, setData] = useState(initialData);
  const [loading, setLoading] = useState(false);
  const [progress, setProgress] = useState(0);
  {{#if (includes features 'ai')}}
  const [aiSuggestions, setAiSuggestions] = useState<string[]>([]);
  {{/if}}
  {{#if (includes features 'progress')}}
  const [completionStatus, setCompletionStatus] = useState({
    basic: false,
    detailed: false,
    review: false
  });
  {{/if}}

  useEffect(() => {
    // Calculate progress based on completed fields
    const totalFields = Object.keys(data).length;
    const completedFields = Object.values(data).filter(value => 
      value !== '' && value !== null && value !== undefined
    ).length;
    setProgress(totalFields > 0 ? (completedFields / totalFields) * 100 : 0);
  }, [data]);

  const handleFieldChange = (field: string, value: any) => {
    setData(prev => ({ ...prev, [field]: value }));
  };

  const handleSave = async () => {
    setLoading(true);
    try {
      if (onSave) {
        await onSave(data);
      }
      // Show success message
    } catch (error) {
      console.error('Save error:', error);
      // Show error message
    } finally {
      setLoading(false);
    }
  };

  {{#if (includes features 'export')}}
  const handleExport = (format: 'pdf' | 'excel' | 'json') => {
    if (onExport) {
      onExport(format);
    }
  };
  {{/if}}

  {{#if (includes features 'ai')}}
  const generateAISuggestions = async () => {
    setLoading(true);
    try {
      // Call AI service for suggestions
      const suggestions = await fetch('/api/ai/suggestions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          tool: '{{kebabCase name}}',
          category: '{{category}}',
          currentData: data 
        })
      }).then(res => res.json());
      
      setAiSuggestions(suggestions);
    } catch (error) {
      console.error('AI suggestion error:', error);
    } finally {
      setLoading(false);
    }
  };
  {{/if}}

  return (
    <div className={`max-w-6xl mx-auto space-y-6 ${className}`}>
      {/* Header */}
      <Card>
        <CardHeader>
          <div className="flex justify-between items-start">
            <div>
              <CardTitle className="text-2xl">{{titleCase name}}</CardTitle>
              <CardDescription>
                {{#if (eq category 'planning')}}
                Strategic planning tool for {{titleCase name}}
                {{else if (eq category 'financial')}}
                Financial management tool for {{titleCase name}}
                {{else if (eq category 'marketing')}}
                Marketing and sales tool for {{titleCase name}}
                {{else if (eq category 'operations')}}
                Operations management tool for {{titleCase name}}
                {{else if (eq category 'legal')}}
                Legal and compliance tool for {{titleCase name}}
                {{else}}
                Business tool for {{titleCase name}}
                {{/if}}
              </CardDescription>
            </div>
            <div className="flex items-center space-x-2">
              {{#if (includes features 'progress')}}
              <div className="text-right">
                <div className="text-sm text-gray-500">Progress</div>
                <div className="text-lg font-semibold">{Math.round(progress)}%</div>
              </div>
              {{/if}}
              {{#if (includes features 'collaboration')}}
              <Button variant="outline" size="sm">
                <Share2 className="h-4 w-4 mr-2" />
                Share
              </Button>
              {{/if}}
            </div>
          </div>
          {{#if (includes features 'progress')}}
          <Progress value={progress} className="w-full" />
          {{/if}}
        </CardHeader>
      </Card>

      {{#if aslSupport}}
      {/* ASL Video Section */}
      <Card>
        <CardHeader>
          <CardTitle>ASL Instructions</CardTitle>
        </CardHeader>
        <CardContent>
          <ASLVideoPlayer
            videoUrl="/asl/tools/{{kebabCase name}}-tutorial.mp4"
            title="{{titleCase name}} Tutorial"
            className="w-full max-w-2xl mx-auto"
          />
        </CardContent>
      </Card>
      {{/if}}

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main Tool Interface */}
        <div className="lg:col-span-2 space-y-6">
          {{#if (eq category 'planning')}}
          {/* Planning Tool Interface */}
          <Card>
            <CardHeader>
              <CardTitle>Strategic Planning</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-1">Vision Statement</label>
                <Textarea
                  value={data.vision || ''}
                  onChange={(e) => handleFieldChange('vision', e.target.value)}
                  placeholder="Define your long-term vision..."
                  rows={3}
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Mission Statement</label>
                <Textarea
                  value={data.mission || ''}
                  onChange={(e) => handleFieldChange('mission', e.target.value)}
                  placeholder="Describe your company's mission..."
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Target Market</label>
                  <Input
                    value={data.targetMarket || ''}
                    onChange={(e) => handleFieldChange('targetMarket', e.target.value)}
                    placeholder="Define your target market..."
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Timeline</label>
                  <Select value={data.timeline || ''} onValueChange={(value) => handleFieldChange('timeline', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select timeline" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="3months">3 Months</SelectItem>
                      <SelectItem value="6months">6 Months</SelectItem>
                      <SelectItem value="1year">1 Year</SelectItem>
                      <SelectItem value="2years">2+ Years</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </CardContent>
          </Card>
          {{else if (eq category 'financial')}}
          {/* Financial Tool Interface */}
          <Card>
            <CardHeader>
              <CardTitle>Financial Planning</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Initial Investment</label>
                  <Input
                    type="number"
                    value={data.initialInvestment || ''}
                    onChange={(e) => handleFieldChange('initialInvestment', e.target.value)}
                    placeholder="0.00"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Monthly Revenue Goal</label>
                  <Input
                    type="number"
                    value={data.monthlyRevenue || ''}
                    onChange={(e) => handleFieldChange('monthlyRevenue', e.target.value)}
                    placeholder="0.00"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Operating Expenses</label>
                  <Input
                    type="number"
                    value={data.operatingExpenses || ''}
                    onChange={(e) => handleFieldChange('operatingExpenses', e.target.value)}
                    placeholder="0.00"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Break-even Timeline</label>
                  <Select value={data.breakEvenTimeline || ''} onValueChange={(value) => handleFieldChange('breakEvenTimeline', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select timeline" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="6months">6 Months</SelectItem>
                      <SelectItem value="1year">1 Year</SelectItem>
                      <SelectItem value="18months">18 Months</SelectItem>
                      <SelectItem value="2years">2 Years</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </CardContent>
          </Card>
          {{else}}
          {/* General Tool Interface */}
          <Card>
            <CardHeader>
              <CardTitle>Tool Configuration</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-1">Primary Goal</label>
                <Input
                  value={data.primaryGoal || ''}
                  onChange={(e) => handleFieldChange('primaryGoal', e.target.value)}
                  placeholder="What do you want to achieve?"
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Description</label>
                <Textarea
                  value={data.description || ''}
                  onChange={(e) => handleFieldChange('description', e.target.value)}
                  placeholder="Provide more details..."
                  rows={4}
                />
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Priority Level</label>
                  <Select value={data.priority || ''} onValueChange={(value) => handleFieldChange('priority', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select priority" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="low">Low</SelectItem>
                      <SelectItem value="medium">Medium</SelectItem>
                      <SelectItem value="high">High</SelectItem>
                      <SelectItem value="urgent">Urgent</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Due Date</label>
                  <Input
                    type="date"
                    value={data.dueDate || ''}
                    onChange={(e) => handleFieldChange('dueDate', e.target.value)}
                  />
                </div>
              </div>
            </CardContent>
          </Card>
          {{/if}}

          {/* Action Buttons */}
          <Card>
            <CardContent className="pt-6">
              <div className="flex flex-wrap gap-3">
                <Button onClick={handleSave} disabled={loading} className="flex-1 min-w-[120px]">
                  {loading ? 'Saving...' : 'Save Progress'}
                </Button>
                {{#if (includes features 'export')}}
                <Button variant="outline" onClick={() => handleExport('pdf')}>
                  <Download className="h-4 w-4 mr-2" />
                  Export PDF
                </Button>
                <Button variant="outline" onClick={() => handleExport('excel')}>
                  <Table className="h-4 w-4 mr-2" />
                  Export Excel
                </Button>
                {{/if}}
                {{#if (includes features 'ai')}}
                <Button variant="outline" onClick={generateAISuggestions}>
                  <Brain className="h-4 w-4 mr-2" />
                  AI Suggestions
                </Button>
                {{/if}}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="lg:col-span-1 space-y-6">
          {{#if (includes features 'progress')}}
          {/* Progress Tracking */}
          <Card>
            <CardHeader>
              <CardTitle>Progress Tracking</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-sm">Basic Information</span>
                <span className={`text-xs px-2 py-1 rounded ${completionStatus.basic ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-600'}`}>
                  {completionStatus.basic ? 'Complete' : 'Pending'}
                </span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm">Detailed Planning</span>
                <span className={`text-xs px-2 py-1 rounded ${completionStatus.detailed ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-600'}`}>
                  {completionStatus.detailed ? 'Complete' : 'Pending'}
                </span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm">Final Review</span>
                <span className={`text-xs px-2 py-1 rounded ${completionStatus.review ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-600'}`}>
                  {completionStatus.review ? 'Complete' : 'Pending'}
                </span>
              </div>
            </CardContent>
          </Card>
          {{/if}}

          {{#if (includes features 'ai')}}
          {/* AI Suggestions */}
          <Card>
            <CardHeader>
              <CardTitle>AI Recommendations</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {aiSuggestions.length > 0 ? (
                aiSuggestions.map((suggestion, index) => (
                  <div key={index} className="p-3 bg-blue-50 rounded-lg">
                    <p className="text-sm text-blue-800">{suggestion}</p>
                  </div>
                ))
              ) : (
                <p className="text-sm text-gray-500">
                  Click "AI Suggestions" to get personalized recommendations
                </p>
              )}
            </CardContent>
          </Card>
          {{/if}}

          {{#if (includes features 'templates')}}
          {/* Template Library */}
          <Card>
            <CardHeader>
              <CardTitle>Templates</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              <Button variant="ghost" className="w-full justify-start">
                📋 Basic Template
              </Button>
              <Button variant="ghost" className="w-full justify-start">
                🚀 Startup Template
              </Button>
              <Button variant="ghost" className="w-full justify-start">
                🏢 Corporate Template
              </Button>
              <Button variant="ghost" className="w-full justify-start">
                💡 Innovation Template
              </Button>
            </CardContent>
          </Card>
          {{/if}}

          {/* Help & Resources */}
          <Card>
            <CardHeader>
              <CardTitle>Help & Resources</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              <Button variant="ghost" className="w-full justify-start">
                📚 User Guide
              </Button>
              <Button variant="ghost" className="w-full justify-start">
                🎥 Video Tutorial
              </Button>
              <Button variant="ghost" className="w-full justify-start">
                💬 Ask Butch AI
              </Button>
              <Button variant="ghost" className="w-full justify-start">
                🆘 Get Support
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

export default {{pascalCase name}};