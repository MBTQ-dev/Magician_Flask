import React, { useState, useRef, useEffect } from 'react';
import { Play, Pause, Volume2, VolumeX, RotateCcw, Settings } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';

interface {{pascalCase name}}ASLProps {
  videoUrl?: string;
  transcriptUrl?: string;
  title?: string;
  description?: string;
  className?: string;
  autoPlay?: boolean;
  showControls?: boolean;
}

export function {{pascalCase name}}ASL({
  videoUrl = "/asl/{{kebabCase name}}-{{context}}.mp4",
  transcriptUrl = "/asl/{{kebabCase name}}-transcript.txt",
  title = "{{titleCase name}} ASL Video",
  description = "{{#if (eq context 'formation')}}Step-by-step business formation guidance in ASL{{else if (eq context 'instructions')}}Detailed instructions for {{titleCase name}} in ASL{{else if (eq context 'tutorial')}}Complete tutorial for {{titleCase name}} in ASL{{else}}ASL guidance for {{titleCase name}}{{/if}}",
  className = "",
  autoPlay = false,
  showControls = true
}: {{pascalCase name}}ASLProps) {
  const videoRef = useRef<HTMLVideoElement>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [isMuted, setIsMuted] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [transcript, setTranscript] = useState<string>('');
  const [showTranscript, setShowTranscript] = useState(false);
  const [playbackSpeed, setPlaybackSpeed] = useState(1);

  useEffect(() => {
    const video = videoRef.current;
    if (!video) return;

    const updateTime = () => setCurrentTime(video.currentTime);
    const updateDuration = () => setDuration(video.duration);
    
    video.addEventListener('timeupdate', updateTime);
    video.addEventListener('loadedmetadata', updateDuration);
    video.addEventListener('play', () => setIsPlaying(true));
    video.addEventListener('pause', () => setIsPlaying(false));

    return () => {
      video.removeEventListener('timeupdate', updateTime);
      video.removeEventListener('loadedmetadata', updateDuration);
      video.removeEventListener('play', () => setIsPlaying(true));
      video.removeEventListener('pause', () => setIsPlaying(false));
    };
  }, []);

  useEffect(() => {
    // Load transcript
    fetch(transcriptUrl)
      .then(response => response.text())
      .then(text => setTranscript(text))
      .catch(error => console.error('Failed to load transcript:', error));
  }, [transcriptUrl]);

  const togglePlay = () => {
    if (videoRef.current) {
      if (isPlaying) {
        videoRef.current.pause();
      } else {
        videoRef.current.play();
      }
    }
  };

  const toggleMute = () => {
    if (videoRef.current) {
      videoRef.current.muted = !isMuted;
      setIsMuted(!isMuted);
    }
  };

  const restart = () => {
    if (videoRef.current) {
      videoRef.current.currentTime = 0;
      videoRef.current.play();
    }
  };

  const changeSpeed = (speed: number) => {
    if (videoRef.current) {
      videoRef.current.playbackRate = speed;
      setPlaybackSpeed(speed);
    }
  };

  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  return (
    <Card className={`w-full max-w-4xl mx-auto ${className}`}>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>{title}</span>
          <div className="flex items-center space-x-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setShowTranscript(!showTranscript)}
            >
              üìù Transcript
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => {
                // Open accessibility settings
                alert('Accessibility settings would open here');
              }}
            >
              <Settings className="h-4 w-4" />
            </Button>
          </div>
        </CardTitle>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      
      <CardContent>
        <div className="space-y-4">
          {/* Video Player */}
          <div className="relative bg-black rounded-lg overflow-hidden">
            <video
              ref={videoRef}
              className="w-full aspect-video object-cover"
              autoPlay={autoPlay}
              loop={false}
              playsInline
              poster="/asl/{{kebabCase name}}-poster.jpg"
            >
              <source src={videoUrl} type="video/mp4" />
              <track 
                kind="captions" 
                src="/asl/{{kebabCase name}}-captions.vtt" 
                srcLang="en" 
                label="English Captions"
                default
              />
              Your browser does not support the video tag.
            </video>

            {/* Video Controls Overlay */}
            {showControls && (
              <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-4">
                <div className="flex items-center justify-between text-white">
                  {/* Play Controls */}
                  <div className="flex items-center space-x-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={togglePlay}
                      className="text-white hover:bg-white/20"
                    >
                      {isPlaying ? <Pause className="h-5 w-5" /> : <Play className="h-5 w-5" />}
                    </Button>
                    
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={restart}
                      className="text-white hover:bg-white/20"
                    >
                      <RotateCcw className="h-4 w-4" />
                    </Button>
                    
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={toggleMute}
                      className="text-white hover:bg-white/20"
                    >
                      {isMuted ? <VolumeX className="h-4 w-4" /> : <Volume2 className="h-4 w-4" />}
                    </Button>
                  </div>

                  {/* Time Display */}
                  <div className="text-sm">
                    {formatTime(currentTime)} / {formatTime(duration)}
                  </div>

                  {/* Speed Controls */}
                  <div className="flex items-center space-x-1">
                    {[0.5, 0.75, 1, 1.25, 1.5].map(speed => (
                      <Button
                        key={speed}
                        variant={playbackSpeed === speed ? "secondary" : "ghost"}
                        size="sm"
                        onClick={() => changeSpeed(speed)}
                        className="text-white hover:bg-white/20 text-xs px-2"
                      >
                        {speed}x
                      </Button>
                    ))}
                  </div>
                </div>

                {/* Progress Bar */}
                <div className="mt-2">
                  <div className="w-full bg-gray-600 rounded-full h-1">
                    <div
                      className="bg-blue-500 h-1 rounded-full transition-all"
                      style={{ width: `${(currentTime / duration) * 100}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Transcript Section */}
          {showTranscript && transcript && (
            <div className="bg-gray-50 rounded-lg p-4">
              <h3 className="font-semibold mb-2">Video Transcript</h3>
              <div className="text-sm text-gray-700 whitespace-pre-wrap max-h-64 overflow-y-auto">
                {transcript}
              </div>
            </div>
          )}

          {/* Quick Actions */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
            <Button variant="outline" size="sm" className="text-xs">
              üîÑ Replay Section
            </Button>
            <Button variant="outline" size="sm" className="text-xs">
              üí¨ Ask Question
            </Button>
            <Button variant="outline" size="sm" className="text-xs">
              üìã Take Notes
            </Button>
            <Button variant="outline" size="sm" className="text-xs">
              üì§ Share Video
            </Button>
          </div>

          {/* Related Content */}
          <div className="border-t pt-4">
            <h4 className="font-medium mb-2">Related ASL Content</h4>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
              <div className="p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
                <div className="text-sm font-medium">Next: {{#if (eq context 'formation')}}Legal Requirements{{else if (eq context 'instructions')}}Advanced Features{{else if (eq context 'tutorial')}}Best Practices{{else}}Related Topic{{/if}}</div>
                <div className="text-xs text-gray-500">5:30 duration</div>
              </div>
              <div className="p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
                <div className="text-sm font-medium">Review: Key Points</div>
                <div className="text-xs text-gray-500">2:15 duration</div>
              </div>
              <div className="p-3 border rounded-lg hover:bg-gray-50 cursor-pointer">
                <div className="text-sm font-medium">Q&A Session</div>
                <div className="text-xs text-gray-500">8:45 duration</div>
              </div>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

export default {{pascalCase name}}ASL;